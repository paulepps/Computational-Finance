1 - pnorm(0.1, mean=0.05, sd=0.1)
1 - pnorm(-0.1, mean=0.05, sd=0.1)
pnorm(-0.1, mean=0.05, sd=0.1)
pnorm(0.15, mean=0.05, sd=0.1) - pnorm(-0.05, mean=0.05, sd=0.1)
qnorm(0.01, mean=0.05, sd=0.1)
qnorm(0.05, mean=0.05, sd=0.1)
qnorm(0.95, mean=0.05, sd=0.1)
qnorm(0.99, mean=0.05, sd=0.1)
mu.r = 0.02
sd.r = 0.10
x.vals = seq(-3, 3, length=150)*sd.r + mu.r
plot(x.vals, dnorm(x.vals, mean=mu.r, sd=sd.r), type="l", lwd=2,
ylim=c(0, max(dnorm(x.vals, mean=0.01, sd=0.05))),
col="black", xlab="x", ylab="pdf")
points(x.vals, dnorm(x.vals, mean=0.01, sd=0.05), type="l", lwd=2,
col="blue", lty="dotted")
segments(0.02, 0, 0.02, dnorm(0.02, mean=0.02, sd=0.1), lwd=2)
segments(0.01, 0, 0.01, dnorm(0.01, mean=0.01, sd=0.05), lwd=2,
col="blue", lty="dotted")
legend(x="topleft", legend=c("Amazon", "Boeing"), lwd=2,
col=c("black", "blue"), lty=c("solid","dotted"))
mu.r = 0.02
mu.r = 0.05
sd.r = 0.1
x.vals = seq(-25, 30, length=150)*sd.r + mu.r
plot(x.vals, dnorm(x.vals, mean=mu.r, sd=sd.r), typr="l", lwd=2,)
plot(x.vals, dnorm(x.vals, mean=mu.r, sd=sd.r), type="l", lwd=2,)
plot(x.vals, dnorm(x.vals, mean=mu.r, sd=sd.r), type="l", lwd=2,
ylim=c(0, max(dnorm(x.vals, mean=0.025, sd=0.05))),
col="black", xlab="x", ylab="pdf")
points(x.vals, dnorm(x.vals, mean=0.025, sd=0.05), type="l", lwd=2,
col="blue", lty="dotted")
qnorm(0.05, 0.05, 0.1)
qnorm(0.01, 0.04, 0.09)
qnorm(0.01, 0.04, 0.09) * 100000
qnorm(0.05, 0.04, 0.09) * 100000
mu.R = 0.05
sd.R = 0.10
w0 = 10000
q.01.R = mu.R + sd.R*qnorm(0.01)
q.05.R = mu.R + sd.R*qnorm(0.05)
VaR.01 = abs(q.01.R*w0)
VaR.05 = abs(q.05.R*w0)
VaR.01
VaR.05
qnorm(.05, .05, .1)
exp(qnorm(.05, .05, .1))
exp(qnorm(.05, .05, .1)) - 1
exp(qnorm(.01, .04, .09)) - 1
100000 * (exp(qnorm(.01, .04, .09)) - 1)
100000 * (exp(qnorm(.05, .04, .09)) - 1)
price.a0 = 38.23
price.c0 = 41.11
price.a1 = 41.29
price.c1 = 41.74
(price.a1 - price.a0) / price.a0
(price.c1 - price.c0) / price.c0
ln(1 + (price.c1 - price.c0) / price.c0)
log(1 + (price.c1 - price.c0) / price.c0)
log(1 + ((price.c1 - price.c0) / price.c0))
log(1 + (price.a1 - price.a0) / price.a0)
(price.a1 + 0.1 - price.a0) / price.a0
.1 / price.a0
(1.08)^12
1.077^12
exp(1.51) - 1
log(2,51)
(.2 * ((price.c1 - price.c0) / price.c0) + (.8 * ((price.a1 - price.a0) / price.a0)
))
(.2 * ((price.c1 - price.c0) / price.c0)) + (.8 * ((price.a1 - price.a0) / price.a0))
mu = 0.04
sd = 0.09
pnorm(.05, mean=0.05, sd=0.10)
qnorm(.05, mean=0.05, sd=0.10)
qnorm(0.05)
.04 + .09*qnorm(0.05)
exp(.04 + .09*qnorm(0.05))
exp(.04 + .09*qnorm(0.05)) - 1
100000 * (exp(.04 + .09*qnorm(0.05)) - 1)
100000 * (exp(.48 + .3114*qnorm(0.05)) - 1)
100000 * (exp(.48 + .3114*qnorm(0.01)) - 1)
sqrt(16)
100000 * (exp(.48 + sqrt(12)*qnorm(0.01)) - 1)
100000 * (exp(.48 + sqrt(12)*0.9*qnorm(0.01)) - 1)
100000 * (exp(.48 + sqrt(12)*0.09*qnorm(0.01)) - 1)
100000 * (exp(.48 + sqrt(12)*0.09*qnorm(0.05)) - 1)
library mvtnorm
library(mvtnorm)
library(mvtnorm)
install.packages("mvtnorm")
library(mvtnorm)
mu.x = 0.05
sig.x = 0.10
mu.y = 0.025
sig.y = 0.05
# simulate from bivariate normal with rho = 0.9
rho.xy = 0.9
sig.xy = rho.xy*sig.x*sig.y
Sigma.xy = matrix(c(sig.x^2, sig.xy, sig.xy, sig.y^2), 2, 2, byrow=TRUE)
# use the rmvnorm() function to simulate from bivariate normal
?rmvnorm
n = 100
set.seed(123)
xy.vals = rmvnorm(n, mean=c(mu.x, mu.y), sigma=Sigma.xy)
head(xy.vals)
plot(xy.vals[,1], xy.vals[,2], pch=16, cex=2, col="blue",
xlab="x", ylab="y")
title("Bivariate normal: rho=0.9")
abline(h=mu.y, v=mu.x)
segments(x0=0, y0=min(xy.vals[,2]), x1=0, y1=0, col="red")
segments(x0=min(xy.vals[,1]), y0=0, x1=0, y1=0, col="red")
?pmvnorm
pmvnorm(lower=c(-Inf, -Inf), upper=c(0, 0), mean=c(mu.x, mu.y), sigma=Sigma.xy)
rho.xy = -0.9
sig.xy = rho.xy*sig.x*sig.y
Sigma.xy = matrix(c(sig.x^2, sig.xy, sig.xy, sig.y^2), 2, 2, byrow=TRUE)
# use the rmvnorm() function to simulate from bivariate normal
?rmvnorm
n = 100
set.seed(123)
xy.vals = rmvnorm(n, mean=c(mu.x, mu.y), sigma=Sigma.xy)
head(xy.vals)
# scatterplot
plot(xy.vals[,1], xy.vals[,2], pch=16, cex=2, col="blue",
xlab="x", ylab="y")
title("Bivariate normal: rho=0.9")
abline(h=mu.y, v=mu.x)
segments(x0=0, y0=min(xy.vals[,2]), x1=0, y1=0, col="red")
segments(x0=min(xy.vals[,1]), y0=0, x1=0, y1=0, col="red")
# compute area under bivariate standard normal distribution
# Finc P( -00 < X < 0 and -00 < Y < 0)
?pmvnorm
pmvnorm(lower=c(-Inf, -Inf), upper=c(0, 0), mean=c(mu.x, mu.y), sigma=Sigma.xy)
plot(xy.vals[,1], xy.vals[,2], pch=16, cex=2, col="blue",
xlab="x", ylab="y")
rho.xy = 0.0
sig.xy = rho.xy*sig.x*sig.y
Sigma.xy = matrix(c(sig.x^2, sig.xy, sig.xy, sig.y^2), 2, 2, byrow=TRUE)
# use the rmvnorm() function to simulate from bivariate normal
?rmvnorm
n = 100
set.seed(123)
xy.vals = rmvnorm(n, mean=c(mu.x, mu.y), sigma=Sigma.xy)
head(xy.vals)
# scatterplot
plot(xy.vals[,1], xy.vals[,2], pch=16, cex=2, col="blue",
xlab="x", ylab="y")
title("Bivariate normal: rho=0.9")
abline(h=mu.y, v=mu.x)
segments(x0=0, y0=min(xy.vals[,2]), x1=0, y1=0, col="red")
segments(x0=min(xy.vals[,1]), y0=0, x1=0, y1=0, col="red")
# compute area under bivariate standard normal distribution
# Finc P( -00 < X < 0 and -00 < Y < 0)
?pmvnorm
pmvnorm(lower=c(-Inf, -Inf), upper=c(0, 0), mean=c(mu.x, mu.y), sigma=Sigma.xy)
plot(xy.vals[,1], xy.vals[,2], pch=16, cex=2, col="blue",
xlab="x", ylab="y")
rho.xy = 0.9
rho.xy = 0.5
sig.xy = rho.xy*sig.x*sig.y
Sigma.xy = matrix(c(sig.x^2, sig.xy, sig.xy, sig.y^2), 2, 2, byrow=TRUE)
# use the rmvnorm() function to simulate from bivariate normal
?rmvnorm
n = 100
set.seed(123)
xy.vals = rmvnorm(n, mean=c(mu.x, mu.y), sigma=Sigma.xy)
head(xy.vals)
# scatterplot
plot(xy.vals[,1], xy.vals[,2], pch=16, cex=2, col="blue",
xlab="x", ylab="y")
rho.xy = 0.9
rho.xy = -0.5
sig.xy = rho.xy*sig.x*sig.y
Sigma.xy = matrix(c(sig.x^2, sig.xy, sig.xy, sig.y^2), 2, 2, byrow=TRUE)
# use the rmvnorm() function to simulate from bivariate normal
?rmvnorm
n = 100
set.seed(123)
xy.vals = rmvnorm(n, mean=c(mu.x, mu.y), sigma=Sigma.xy)
head(xy.vals)
# scatterplot
plot(xy.vals[,1], xy.vals[,2], pch=16, cex=2, col="blue",
xlab="x", ylab="y")
rho.xy = 0.9
sig.xy = rho.xy*sig.x*sig.y
Sigma.xy = matrix(c(sig.x^2, sig.xy, sig.xy, sig.y^2), 2, 2, byrow=TRUE)
# use the rmvnorm() function to simulate from bivariate normal
?rmvnorm
n = 100
set.seed(123)
xy.vals = rmvnorm(n, mean=c(mu.x, mu.y), sigma=Sigma.xy)
head(xy.vals)
# scatterplot
plot(xy.vals[,1], xy.vals[,2], pch=16, cex=2, col="blue",
xlab="x", ylab="y")
title("Bivariate normal: rho=0.9")
abline(h=mu.y, v=mu.x)
segments(x0=0, y0=min(xy.vals[,2]), x1=0, y1=0, col="red")
segments(x0=min(xy.vals[,1]), y0=0, x1=0, y1=0, col="red")
# compute area under bivariate standard normal distribution
# Finc P( -00 < X < 0 and -00 < Y < 0)
?pmvnorm
pmvnorm(lower=c(-Inf, -Inf), upper=c(0, 0), mean=c(mu.x, mu.y), sigma=Sigma.xy)
# simulate from bivariate normal with rho = 0.9
rho.xy = 0.9
rho.xy = 0.0
sig.xy = rho.xy*sig.x*sig.y
Sigma.xy = matrix(c(sig.x^2, sig.xy, sig.xy, sig.y^2), 2, 2, byrow=TRUE)
# use the rmvnorm() function to simulate from bivariate normal
?rmvnorm
n = 100
set.seed(123)
xy.vals = rmvnorm(n, mean=c(mu.x, mu.y), sigma=Sigma.xy)
head(xy.vals)
# scatterplot
plot(xy.vals[,1], xy.vals[,2], pch=16, cex=2, col="blue",
xlab="x", ylab="y")
title("Bivariate normal: rho=0.9")
abline(h=mu.y, v=mu.x)
segments(x0=0, y0=min(xy.vals[,2]), x1=0, y1=0, col="red")
segments(x0=min(xy.vals[,1]), y0=0, x1=0, y1=0, col="red")
# compute area under bivariate standard normal distribution
# Finc P( -00 < X < 0 and -00 < Y < 0)
?pmvnorm
pmvnorm(lower=c(-Inf, -Inf), upper=c(0, 0), mean=c(mu.x, mu.y), sigma=Sigma.xy)
rho.xy = 0.9
rho.xy = -0.9
sig.xy = rho.xy*sig.x*sig.y
Sigma.xy = matrix(c(sig.x^2, sig.xy, sig.xy, sig.y^2), 2, 2, byrow=TRUE)
# use the rmvnorm() function to simulate from bivariate normal
?rmvnorm
n = 100
set.seed(123)
xy.vals = rmvnorm(n, mean=c(mu.x, mu.y), sigma=Sigma.xy)
head(xy.vals)
# scatterplot
plot(xy.vals[,1], xy.vals[,2], pch=16, cex=2, col="blue",
xlab="x", ylab="y")
title("Bivariate normal: rho=0.9")
abline(h=mu.y, v=mu.x)
segments(x0=0, y0=min(xy.vals[,2]), x1=0, y1=0, col="red")
segments(x0=min(xy.vals[,1]), y0=0, x1=0, y1=0, col="red")
# compute area under bivariate standard normal distribution
# Finc P( -00 < X < 0 and -00 < Y < 0)
?pmvnorm
pmvnorm(lower=c(-Inf, -Inf), upper=c(0, 0), mean=c(mu.x, mu.y), sigma=Sigma.xy)
ma1.model.5 = list(ma=0.5)
mu = 0.05
set.seed(123)
ma1.sim.5 = mu + arima.sim(model=ma1.model.5, n=250,
innov=rnorm(n=250, mean=0, sd=0.1))
acf.ma1.model.5 = ARMAacf(ma=0.5, lag.max=10)
par(mfrow=c(3,1))
ts.plot(ma1.sim.5, main="MA(1) Process: mu=0.05, theta=0.5",
xlab="time",ylab="y(t)")
abline(h=0)
plot(1:10, acf.ma1.model.5[2:11], type="h", col="blue", main="theoretical ACF")
tmp=acf(ma1.sim.5, lag.max=10, main="Sample ACF")
par(mfrow=c(1,1))
ma1.model.9 = list(ma=0.9)
mu = 0.05
set.seed(123)
ma1.sim.9 = mu + arima.sim(model=ma1.model.9, n=250,
innov=rnorm(n=250, mean=0, sd=0.1))
acf.ma1.model.9 = ARMAacf(ma=0.9, lag.max=10)
par(mfrow=c(3,1))
ts.plot(ma1.sim.9, main="MA(1) Process: mu=0.05, theta=0.9",
xlab="time",ylab="y(t)")
abline(h=0)
plot(1:10, acf.ma1.model.9[2:11], type="h", col="blue", main="theoretical ACF")
tmp=acf(ma1.sim.9, lag.max=10, main="Sample ACF")
par(mfrow=c(1,1))
ar1.model.5 = list(ar=0.5)
ar1.model.9 = list(ar=0.9)
ar1.model.9 = list(ar=0.9)
mu = 0.05
set.seed(123)
ar1.sim.9 = mu + arima.sim(model=ar1.model.9, n = 250,
innov=rnorm(n=250, mean=0, sd=0.1))
acf.ar1.model.9 = ARMAacf(ar=0.9, lag.max=10)
par(mfrow=c(3,1))
ts.plot(ar1.sim.9,main="AR(1) Process: mu=0.05, phi=0.9",
xlab="time",ylab="y(t)")
abline(h=0)
plot(1:10, acf.ar1.model.9[2:11], type="h", col="blue", main="Theoretical ACF")
tmp=acf(ar1.sim.9, lag.max=10, main="Sample ACF")
par(mfrow=c(1,1))
library(ElemStatLearn)
install.packages("ElemStatLearn")
install.packages("ElemStatLearn")
library(datasets)
data(iris)
iris
class(iris)
irisSubset = iris[,1:4]
irisSubset
plot(irisSubset)
dist(irisSubset)
names(irisSubset)
distIris = dist(irisSubset)
?hclust
hClustering = hclust(distIris)
plot(hClustering)
?readcsv
>readCsv
?readCsv
??readCsv
?read.csv
df = read.csv("https://spark-public.s3.amazonaws.com/dataanalysis/quiz3question4.csv ")
names(df)
df
?scatterplot
df2 <- df[,2:3]
plot(df2)
?kmeans
kmeansObj = kmeans(df2,centers=2)
names(kmeansObj)
plot(df2,col=kmeansObj$cluster)
library("ElemStatLearn", lib.loc="C:/Users/Paul/Documents/R/win-library/2.15")
data(zip.train)
im = zip2image(zip.train,3)
image(im)
im8 = zip2image(zip.train,8)
im18 = zip2image(zip.train,18)
image(im8)
image(im18)
im8
svd1 = svd(im8)
names(svd1)
plot(svd1$d^2/sum(svd1$d^2),xlab="Column",ylab="Percentage",pch=19)
svd1$d^2/sum(svd1$d^2)
svd2 = svd(im18)
plot(svd2$d^2/sum(svd2$d^2),xlab="Column",ylab="Percentage",pch=19)
image(im18)
image(im8)
muhat.vals = apply(lab9.z, 2, mean)
options(digits=4, width=70)
library("zoo")
# load the data into a zoo object using the zoo function read.csv
setwd("~/Coursera/Computational Finance")
source(file="portfolio.r")
lab9.df = read.csv("Data/lab9returns.csv", stringsAsFactors=F)
colnames(lab9.df)
lab9.z = zoo(x=lab9.df[, -1],
order.by=as.yearmon(lab9.df[, 1], format="%b-%y"))
start(lab9.z)
end(lab9.z)
colnames(lab9.z)
#
# 3. Create timePlots of data
#
# create custom panel function to draw horizontal line at zero in each panel
muhat.vals = apply(lab9.z, 2, mean)
muhat.vals
class(muhat.vals)
sigma2hat.vals = apply(lab9.z, 2, var)
sigma2hat.vals
sigmahat.vals = apply(lab9.z, 2, sd)
sigmahat.vals
cov.mat = var(lab9.z)
cov.mat
cor.mat = cor(lab9.z)
cor.mat
muhat2.vals = c(0.0043, 0.0049, 0.0128)
muhat2.vals
class(muhat2.vals)
muhat.vals = c(0.0043, 0.0049, 0.0128)
muhat.vals
sigmahat.vals = c(0.0559, 0.0290, 0.0845)
sigma2hat.vals = c(0.003125, 0.000841, 0.007140)
library(PerformanceAnalytics)
library(zoo)
library(boot)
library(tseries)
VBLTX.prices = get.hist.quote(instrument="vbltx", start="2005-09-01",
end="2010-09-30", quote="AdjClose",
provider="yahoo", origin="1970-01-01",
compression="m", retclass="zoo")
VBLTX.prices = get.hist.quote(instrument="vbltx", start="2004-09-01",
end="2009-09-30", quote="AdjClose",
provider="yahoo", origin="1970-01-01",
compression="m", retclass="zoo")
# change class of time index to yearmon which is appropriate for monthly data
# index() and as.yearmon() are functions in the zoo package
#
index(VBLTX.prices) = as.yearmon(index(VBLTX.prices))
class(VBLTX.prices)
colnames(VBLTX.prices)
start(VBLTX.prices)
end(VBLTX.prices)
VPACX.prices = get.hist.quote(instrument="vpacx", start="2004-09-01",
end="2009-09-30", quote="AdjClose",
provider="yahoo", origin="1970-01-01",
compression="m", retclass="zoo")
# change class of time index to yearmon which is appropriate for monthly data
# index() and as.yearmon() are functions in the zoo package
#
index(VPACX.prices) = as.yearmon(index(VPACX.prices))
class(VPACX.prices)
colnames(VPACX.prices)
start(VPACX.prices)
end(VPACX.prices)
VEIEX.prices = get.hist.quote(instrument="VEIEX", start="2004-09-01",
end="2009-09-30", quote="AdjClose",
provider="yahoo", origin="1970-01-01",
compression="m", retclass="zoo")
# change class of time index to yearmon which is appropriate for monthly data
# index() and as.yearmon() are functions in the zoo package
#
index(VEIEX.prices) = as.yearmon(index(VEIEX.prices))
class(VEIEX.prices)
colnames(VEIEX.prices)
start(VEIEX.prices)
end(VEIEX.prices)
lab4Prices.z = merge(VPACX.prices, VBLTX.prices, VEIEX.prices)
colnames(lab4Prices.z) = c("VPACX", "VBLTX", "VEIEX")
lab4Returns.z = diff(log(lab4Prices.z))
plot(lab4Returns.z, plot.type="single", lty=1:3, col=1:3, lwd=2)
legend(x="bottomleft", legend=colnames(lab4Returns.z), lty=1:3, col=1:3, lwd=2)
abline(h=0)
title("Monthly cc returns")
ret.mat = coredata(lab4Returns.z)
colnames(ret.mat)
head(ret.mat)
muhat.vals = apply(ret.mat, 2, mean)
muhat.vals
sigma2hat.vals = apply(ret.mat, 2, var)
sigma2hat.vals
sigmahat.vals = apply(ret.mat, 2, sd)
sigmahat.vals
cov.mat = var(ret.mat)
cov.mat
cor.mat = cor(ret.mat)
cor.mat
mu.target = max(muhat.vals)
mu.target
mu.target = 0.01
e1.port = efficient.portfolio(muhat.vals, cov.mat, mu.target)
e1.port
tan.port = tangency.portfolio(muhat.vals, cov.mat, risk.free=0.008)
summary(tan.port)
tan.port = tangency.portfolio(muhat.vals, cov.mat, risk.free=0.0008)
summary(tan.port)
names(tan.port)
tan.port
x.t.01 = (.01 - .008)/(.017 - .008)
x.t.01
x.t.01 = (.01 - .008)/(.018 - .008)
x.t.01
tan.port$er
plot(tan.port)
x.t = seq(from=0, to=2, by=0.1)
mu.p.t = r.f + x.t*(tan.port$er - r.f)
r.f = 0.008
mu.p.t = r.f + x.t*(tan.port$er - r.f)
sig.p.t = x.t*tan.port$sd
plot(sig.p, mu.p, type="b", pch=16, ylim=c(0, max(mu.p)), xlim=c(0, max(sig.p)),
xlab=expression(sigma[p]), ylab=expression(mu[p]),
col=c(rep("green", 18), rep("red", 13)))
tan.port = tangency.portfolio(muhat.vals, cov.mat, risk.free=0.0008)
summary(tan.port)
plot(tan.port, col="blue")
tan.port
x.t.01 = (.01 - .0008)/(.01756 - .0008)
x.t.01
gmin.port = globalMin.portfolio(muhat.vals, cov.mat)
gmin.port
?norminv
qnorm(0.05, .003998, .02852)
qhat.05 = .003998 + .02852*qnorm(0.05)
qhat.05
w0 = 100000
VaRhat.05 = (exp(qhat.05)-1)*w0
VaRhat.05
